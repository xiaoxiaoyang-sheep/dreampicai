package auth

import (
	"dreampicai/view"
	"dreampicai/view/layout"
	"github.com/nedpals/supabase-go"
)

templ AccountSetup() {
	@layout.App(true) {
		<div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl">
			<h1 class="text-xl font-black mb-8 text-center">Setup your account</h1>
			@AccountSetupFrom(AccountSetupParams{}, AccountSetupErrors{})
		</div>
	}
}

type AccountSetupParams struct {
	Username string
}

type AccountSetupErrors struct {
	Username string
}

templ AccountSetupFrom(params AccountSetupParams, errors AccountSetupErrors) {
	<form
		hx-post="/account/setup"
		hx-swap="outerHTMLhh"
	>
		<label class="form-control w-full max-w-xs">
			<div class="label">
				<span class="label-text">Enter your username</span>
			</div>
			<input type="text" name="username" class="input input-bordered"/>
			<div class="label">
				if len(errors.Username) > 0 {
					<span class="label-text text-error">{ errors.Username }</span>
				}
			</div>
		</label>
		<button class="btn btn-primary">setup account <i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

templ Login() {
	@layout.App(false) {
		<div class="flex justify-center mt-[8rem]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to dreampicai</h1>
				@LoginFrom(supabase.UserCredentials{}, LoginError{})
			</div>
		</div>
	}
}

templ Signup() {
	@layout.App(false) {
		<div class="flex justify-center mt-[8rem]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Signup to dreampicai</h1>
				@SignupForm(SignupParams{}, SignupErrors{})
			</div>
		</div>
	}
}

templ SignupSuccess(email string) {
	<div>
		A confirmation email has been sent to: <span class="font-semibold text-success">{ email }</span>
	</div>
}

type LoginError struct {
	Email              string
	Password           string
	InvaildCredentials string
}

templ LoginFrom(creds supabase.UserCredentials, errors LoginError) {
	<form
		hx-post={ "/login?" + view.GetCtxStringValue(ctx, "to") }
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" name="email" value={ creds.Email } autocompete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Email) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" autocompete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		if len(errors.InvaildCredentials) > 0 {
			<div class="text-sm text-error">
				{ errors.InvaildCredentials }
			</div>
		}
		<button type="submit" class="btn btn-primary w-full">login<i class="fa-solid fa-arrow-right"></i></button>
		<div class="divider">OR</div>
		<a href="/login/provider/google" type="submit" class="btn btn-outline w-full">login with Google<i class="fa-brands fa-google"></i></a>
	</form>
}

type SignupParams struct {
	Email           string
	Password        string
	ConfirmPassword string
}

type SignupErrors struct {
	Email           string
	Password        string
	ConfirmPassword string
}

templ SignupForm(params SignupParams, errors SignupErrors) {
	<form
		hx-post="/signup"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" name="email" value={ params.Email } autocompete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Email) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" autocompete="off" required class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Confirm password</span>
			</div>
			<input type="password" name="confirmPassword" autocompete="off" required class="input input-bordered w-full"/>
			if len(errors.ConfirmPassword) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.ConfirmPassword }</span>
				</div>
			}
		</div>
		<button type="submit" class="btn btn-primary w-full">signup<i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

templ ResetPassword() {
	@layout.App(true) {
		<div class="max-w-2xl w-full mx-auto mt-8">
			<div>
				<h1 class="text-lg font-semibold border-b border-gray-700 pb-2">Reset password</h1>
				<div class="py-6">
					<div class="text-label mb-2">Enter new password</div>
					@ResetPasswordForm(ResetPasswordErrors{})
				</div>
			</div>
		</div>
	}
}

type ResetPasswordParams struct {
	NewPassword string
}

type ResetPasswordErrors struct {
	NewPassword string
}

templ ResetPasswordInitiated(email string) {
	<div>
		A password reset link is being sent to <span class="text-info font-semibold">{ email }</span>
	</div>
}

templ ResetPasswordForm(errors ResetPasswordErrors) {
	<form
		hx-put="/auth/reset-password"
		hx-swap="outerHTML"
	>
		<div class="mb-4">
			<input
				class="input input-bordered w-full max-w-sm"
				name="password"
				type="password"
			/>
			if len(errors.NewPassword) > 0 {
				<div class="text-sm text-error mt-1">
					{ errors.NewPassword }
				</div>
			}
		</div>
		<button class="btn btn-primary">update password</button>
	</form>
}

templ CallbackScript() {
	<script>
		var url = window.location.href;
		var newUrl = url.replace("#", "?")
		window.location = newUrl
	</script>
}
